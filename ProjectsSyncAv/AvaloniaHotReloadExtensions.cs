// <auto-generated>
//   This file has been automatically added to your project by the "HotAvalonia.Extensions" NuGet package
//   (https://nuget.org/packages/HotAvalonia.Extensions).
//
//   Please see https://github.com/Kir-Antipov/HotAvalonia for more information.
// </auto-generated>

#region License
// MIT License
//
// Copyright (c) 2023 Kir_Antipov
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#pragma warning disable
#nullable enable

#if ENABLE_XAML_HOT_RELOAD && !DISABLE_XAML_HOT_RELOAD
namespace HotAvalonia
{
    using global::System;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.IO;
    using global::System.Runtime.CompilerServices;
    using global::Avalonia;

    /// <summary>
    /// Provides extension methods for enabling and disabling hot reload functionality for Avalonia applications.
    /// </summary>
    [ExcludeFromCodeCoverage]
    internal static class AvaloniaHotReloadExtensions
    {
        /// <summary>
        /// A mapping between Avalonia <see cref="Application"/> instances and their associated hot reload context.
        /// </summary>
        private static readonly ConditionalWeakTable<Application, AvaloniaHotReloadContext> s_apps =
            new ConditionalWeakTable<Application, AvaloniaHotReloadContext>();

        /// <summary>
        /// Enables hot reload functionality for the given Avalonia application.
        /// </summary>
        /// <param name="app">The Avalonia application instance for which hot reload should be enabled.</param>
        /// <param name="appFilePath">The file path of the application's main source file. Optional if the method called within the file of interest.</param>
        public static void EnableHotReload(this Application app, [CallerFilePath] string? appFilePath = null)
        {
            _ = app ?? throw new ArgumentNullException(nameof(app));
            _ = appFilePath ?? throw new ArgumentNullException(nameof(appFilePath));

            if (!s_apps.TryGetValue(app, out AvaloniaHotReloadContext? context))
            {
                string appXamlFilePath = SourceCodeFileNameToXamlFileName(appFilePath);
                if (!File.Exists(appXamlFilePath))
                    throw new ArgumentException("The corresponding XAML file could not be found.", nameof(appFilePath));

                context = AvaloniaHotReloadContext.FromControl(app, appXamlFilePath);
                s_apps.Add(app, context);
            }

            context.EnableHotReload();
        }

        /// <summary>
        /// Disables hot reload functionality for the given Avalonia application.
        /// </summary>
        /// <param name="app">The Avalonia application instance for which hot reload should be disabled.</param>
        public static void DisableHotReload(this Application app)
        {
            _ = app ?? throw new ArgumentNullException(nameof(app));

            if (s_apps.TryGetValue(app, out AvaloniaHotReloadContext? context))
                context.DisableHotReload();
        }

        /// <summary>
        /// Converts the source code file name to its associated XAML file name.
        /// </summary>
        /// <param name="sourceCodeFileName">The source code file name to be converted.</param>
        /// <returns>The associated XAML file name.</returns>
        private static string SourceCodeFileNameToXamlFileName(string sourceCodeFileName)
        {
            string xamlFileName = Path.Combine(
                Path.GetDirectoryName(sourceCodeFileName),
                Path.GetFileNameWithoutExtension(sourceCodeFileName));

            return Path.HasExtension(xamlFileName) ? xamlFileName : sourceCodeFileName;
        }
    }
}
#else
namespace HotAvalonia
{
    using global::System.Diagnostics;
    using global::System.Diagnostics.CodeAnalysis;
    using global::Avalonia;

    /// <summary>
    /// Provides extension methods for enabling and disabling hot reload functionality for Avalonia applications.
    /// </summary>
    [ExcludeFromCodeCoverage]
    internal static class AvaloniaHotReloadExtensions
    {
        /// <summary>
        /// Enables hot reload functionality for the given Avalonia application.
        /// </summary>
        /// <param name="app">The Avalonia application instance for which hot reload should be enabled.</param>
        /// <param name="appFilePath">The file path of the application's main source file. Optional if the method called within the file of interest.</param>
        [Conditional("DEBUG")]
        public static void EnableHotReload(this Application app, string? appFilePath = null)
        {
        }

        /// <summary>
        /// Disables hot reload functionality for the given Avalonia application.
        /// </summary>
        /// <param name="app">The Avalonia application instance for which hot reload should be disabled.</param>
        [Conditional("DEBUG")]
        public static void DisableHotReload(this Application app)
        {
        }
    }
}
#endif

#nullable restore
#pragma warning restore
